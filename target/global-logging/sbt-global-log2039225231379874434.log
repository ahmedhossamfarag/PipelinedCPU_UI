[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\a1b2c\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\a1b2c\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.10.0 (Oracle Corporation Java 21.0.1)
[debug]       Load.loadUnit: plugins took 102.2187ms
[debug]       Load.loadUnit: defsScala took 0.4987ms
[debug] [Loading] Scanning directory C:\Users\a1b2c\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\a1b2c\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 59.3837 ms
[debug]           Load.resolveProject(global-plugins) took 95.6174ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\a1b2c\.sbt\1.0\plugins, plugins: List(<none>))) took 208.3692ms
[debug] [Loading] Done in C:\Users\a1b2c\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 254.801ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.4248ms
[debug]     Load.loadUnit(file:/C:/Users/a1b2c/.sbt/1.0/plugins/, ...) took 370.2522ms
[debug]   Load.apply: load took 632.0694ms
[debug]   Load.apply: resolveProjects took 13.347ms
[debug]   Load.apply: finalTransforms took 72.8795ms
[debug]   Load.apply: config.delegates took 7.9863ms
[debug]   Load.apply: Def.make(settings)... took 485.0717ms
[debug]   Load.apply: structureIndex took 100.3889ms
[debug]   Load.apply: mkStreams took 1.6527ms
[info] loading global plugins from C:\Users\a1b2c\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4550.3942ms
[debug]           Load.loadUnit: plugins took 25.7106ms
[debug]           Load.loadUnit: defsScala took 0.0031ms
[debug] [Loading] Scanning directory C:\Users\a1b2c\IdeaProjects\PipelinedCPU_UI\project
[debug]             Load.loadUnit: mkEval took 6.1667ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\a1b2c\IdeaProjects\PipelinedCPU_UI\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.298 ms
[info] loading settings for project pipelinedcpu_ui-build from idea.sbt ...
[debug]               Load.resolveProject(pipelinedcpu_ui-build) took 6.6031ms
[debug]             Load.loadTransitive: finalizeProject(Project(id pipelinedcpu_ui-build, base: C:\Users\a1b2c\IdeaProjects\PipelinedCPU_UI\project, plugins: List(<none>))) took 8.4009ms
[debug] [Loading] Done in C:\Users\a1b2c\IdeaProjects\PipelinedCPU_UI\project, returning: (pipelinedcpu_ui-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2317.4852ms
[debug]           Load.loadUnit: cleanEvalClasses took 7.7172ms
[debug]         Load.loadUnit(file:/C:/Users/a1b2c/IdeaProjects/PipelinedCPU_UI/project/, ...) took 2351.8473ms
[debug]       Load.apply: load took 2353.6147ms
[debug]       Load.apply: resolveProjects took 0.1187ms
[debug]       Load.apply: finalTransforms took 10.4221ms
[debug]       Load.apply: config.delegates took 0.376ms
[debug]       Load.apply: Def.make(settings)... took 61.3359ms
[debug]       Load.apply: structureIndex took 32.1363ms
[debug]       Load.apply: mkStreams took 0.0043ms
[info] loading project definition from C:\Users\a1b2c\IdeaProjects\PipelinedCPU_UI\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4631.8592ms
[debug]     Load.loadUnit: defsScala took 0.0037ms
[debug] [Loading] Scanning directory C:\Users\a1b2c\IdeaProjects\PipelinedCPU_UI
[debug]       Load.loadUnit: mkEval took 0.255ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.4721 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 22.6296ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\a1b2c\IdeaProjects\PipelinedCPU_UI, plugins: List(<none>))) took 25.973ms
[debug] [Loading] Done in C:\Users\a1b2c\IdeaProjects\PipelinedCPU_UI, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2222.5106ms
[debug]     Load.loadUnit: cleanEvalClasses took 41.5768ms
[debug]   Load.loadUnit(file:/C:/Users/a1b2c/IdeaProjects/PipelinedCPU_UI/, ...) took 6896.8932ms
[debug] Load.apply: load took 6898.757ms
[debug] Load.apply: resolveProjects took 0.0781ms
[debug] Load.apply: finalTransforms took 22.241ms
[debug] Load.apply: config.delegates took 0.244ms
[debug] Load.apply: Def.make(settings)... took 53.6938ms
[debug] Load.apply: structureIndex took 17.5475ms
[debug] Load.apply: mkStreams took 0.0022ms
[info] set current project to PipelinedCPU_UI (in build file:/C:/Users/a1b2c/IdeaProjects/PipelinedCPU_UI/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 60555 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 60555, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to PipelinedCPU_UI (in build file:/C:/Users/a1b2c/IdeaProjects/PipelinedCPU_UI/)
[debug] > Exec(idea-shell, None, None)
